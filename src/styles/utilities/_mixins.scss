@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
        @media (max-width: $max) {
            @content;
        }
    } @else {
        @content;
    }
}

@function parseInt($n) {
    /* 2 */
    @return $n / ($n * 0 + 1);
}
@mixin rem($property, $values) {
    $px: (); /* 3 */
    $rem: (); /* 3 */

    @each $value in $values {
        /* 4 */

        @if $value == 0 or $value == auto {
            /* 5 */
            $px: append($px, $value);
            $rem: append($rem, $value);
        } @else {
            $unit: unit($value); /* 6 */
            $val: parseInt($value); /* 6 */

            @if $unit == "px" {
                /* 7 */
                $px: append($px, $value);
                $rem: append($rem, ($val / 10 + rem));
            }

            @if $unit == "rem" {
                /* 7 */
                $px: append($px, ($val * 10 + px));
                $rem: append($rem, $value);
            }
        }
    }

    @if $px == $rem {
        /* 8 */
        #{$property}: $px; /* 9 */
    } @else {
        #{$property}: $px; /* 9 */
        #{$property}: $rem; /* 9 */
    }
}

@mixin vw($property, $values) {
    $px: (); /* 3 */
    $vw: (); /* 3 */

    @each $value in $values {
        /* 4 */

        @if $value == 0 or $value == auto {
            /* 5 */
            $px: append($px, $value);
            $vw: append($vw, $value);
        } @else {
            $unit: unit($value); /* 6 */
            $val: parseInt($value); /* 6 */

            @if $unit == "px" {
                /* 7 */
                $px: append($px, $value);
                $vw: append($vw, ($val / 19.2 + vw));
            }

            @if $unit == "vw" {
                /* 7 */
                $px: append($px, ($val * 19.2 + px));
                $vw: append($vw, $value);
            }
        }
    }

    @if $px == $vw {
        /* 8 */
        #{$property}: $px; /* 9 */
    } @else {
        #{$property}: $px; /* 9 */
        #{$property}: $vw; /* 9 */
    }
}

// Selection
$prefixes: ("-moz-", "");
@mixin selection($color, $background) {
    @each $prefix in $prefixes {
        ::#{$prefix}selection {
            color: $color;
            background: $background;
        }
    }
}
// Border radiuss
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
}

@mixin border-bottom-right-radius($radius) {
    -webkit-border-bottom-right-radius: $radius;
    -moz-border-bottom-right-radius: $radius;
    -ms-border-bottom-right-radius: $radius;
    border-bottom-right-radius: $radius;
}

@mixin border-bottom-left-radius($radius) {
    -webkit-border-bottom-left-radius: $radius;
    -moz-border-bottom-left-radius: $radius;
    -ms-border-bottom-left-radius: $radius;
    border-bottom-left-radius: $radius;
}

@mixin border-top-right-radius($radius) {
    -webkit-border-top-right-radius: $radius;
    -moz-border-top-right-radius: $radius;
    -ms-border-top-right-radius: $radius;
    border-top-right-radius: $radius;
}

@mixin border-top-left-radius($radius) {
    -webkit-border-top-left-radius: $radius;
    -moz-border-top-left-radius: $radius;
    -ms-border-top-left-radius: $radius;
    border-top-left-radius: $radius;
}

// Position vertical center
@mixin positioning-vertical-center {
    position: absolute;
    top: 50%;
    margin: 0;
    -webkit-transform: translate(0, -50%);
    -moz-transform: translate(0, -50%);
    transform: translate(0, -50%);
}
// Position center
@mixin positioning-center {
    position: absolute;
    left: 50%;
    margin-right: -50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
}
// Position center center
@mixin positioning-center-center {
    position: absolute;
    top: 50%;
    left: 50%;
    margin-right: -50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
}
// Transition
@mixin transition($transition...) {
    -moz-transition: $transition;
    -o-transition: $transition;
    -webkit-transition: $transition;
    transition: $transition;
}

// Transition
@mixin moretransition($transition...) {
    -moz-transition: $transition;
    -o-transition: $transition;
    -webkit-transition: $transition;
    transition: $transition;
}
// Transform
@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}

// rotate
@mixin rotate($deg) {
    @include transform(rotate(#{$deg}deg));
}

//transform origin
@mixin transform-origin($origin) {
    moz-transform-origin: $origin;
    -o-transform-origin: $origin;
    -ms-transform-origin: $origin;
    -webkit-transform-origin: $origin;
    transform-origin: $origin;
}

// Calculate
@mixin calc($property, $expression) {
    #{$property}: -webkit-calc(#{$expression});
    #{$property}: calc(#{$expression});
}

// Background image
@mixin background-image {
    background-position: center center;
    background-size: cover;
    background-repeat: no-repeat;
}
// Background image icon
@mixin background-image-icon {
    background-position: center center;
    background-repeat: no-repeat;
}

// Not selectable
@mixin prevent-dragging {
    -moz-user-select: none;
    -webkit-user-drag: none;
    -webkit-user-select: none;
    -ms-user-select: none;
}

// Aspect ratio
@mixin aspect-ratio($width, $height, $child: "content") {
    position: relative;
    &:before {
        display: block;
        content: "";
        width: 100%;
        padding-top: ($height / $width) * 100%;
    }
    > .#{$child} {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }
}
// Row margin 0px
@mixin row-no-margin() {
    margin-left: 0px;
    margin-right: 0px;
}
// Box Shadow image
@mixin box-shadow() {
    -o-box-shadow: 0px 22px 48px 0px rgba(0, 0, 0, 0.17);
    -ms-box-shadow: 0px 22px 48px 0px rgba(0, 0, 0, 0.17);
    -webkit-box-shadow: 0px 22px 48px 0px rgba(0, 0, 0, 0.17);
    box-shadow: 0px 22px 48px 0px rgba(0, 0, 0, 0.17);
}

// Box Shadow image
@mixin box-shadow-light() {
    -o-box-shadow: 0px 2px 10px 0px rgba(0, 0, 0, 0.05);
    -ms-box-shadow: 0px 2px 10px 0px rgba(0, 0, 0, 0.05);
    -webkit-box-shadow: 0px 2px 10px 0px rgba(0, 0, 0, 0.05);
    box-shadow: 0px 2px 10px 0px rgba(0, 0, 0, 0.05);
}

//ease transition
@mixin ease($duration: 100) {
    -webkit-transition: all #{$duration}ms ease-in-out;
    -moz-transition: all #{$duration}ms ease-in-out;
    -o-transition: all #{$duration}ms ease-in-out;
    transition: all #{$duration}ms ease-in-out;
}

//rotate
@mixin rotate($degrees) {
    -webkit-transform: rotate(#{$degrees}deg);
    -moz-transform: rotate(#{$degrees}deg);
    -ms-transform: rotate(#{$degrees}deg);
    -o-transform: rotate(#{$degrees}deg);
    transform: rotate(#{$degrees}deg);
    filter: progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)});
    -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})";
    zoom: 1;
}
//vertical align
@mixin vertical-align($position: relative) {
    position: $position;
    top: 50%;
    -webkit-transform: translate3d(0, 0, 0) translateY(-50%);
    -ms-transform: translate3d(0, 0, 0) translateY(-50%);
    transform: translate3d(0, 0, 0) translateY(-50%);
}

@mixin translate($x, $y) {
    -webkit-transform: translate3d(0, 0, 0) translate(#{$x}, #{$y});
    -ms-transform: translate3d(0, 0, 0) translate(#{$x}, #{$y});
    transform: translate3d(0, 0, 0) translate(#{$x}, #{$y});
}

@mixin translate-y($value) {
    -webkit-transform: translate3d(0, 0, 0) translateY(#{$value});
    -ms-transform: translate3d(0, 0, 0) translateY(#{$value});
    transform: translate3d(0, 0, 0) translateY(#{$value});
}

@mixin translate-x($value) {
    -webkit-transform: translate3d(0, 0, 0) translateX(#{$value});
    -ms-transform: translate3d(0, 0, 0) translateX(#{$value});
    transform: translate3d(0, 0, 0) translateX(#{$value});
}

//truncate string with ellipsis
@mixin truncate() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin no-outline() {
    outline: none !important;
    &:focus,
    &:active {
        outline: none !important;
    }
}

@mixin pseudo {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}
